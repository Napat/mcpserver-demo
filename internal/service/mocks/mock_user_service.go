// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/Napat/mcpserver-demo/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetLoginHistory mocks base method.
func (m *MockIUserService) GetLoginHistory(userID uint, limit int) ([]models.LoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginHistory", userID, limit)
	ret0, _ := ret[0].([]models.LoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginHistory indicates an expected call of GetLoginHistory.
func (mr *MockIUserServiceMockRecorder) GetLoginHistory(userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginHistory", reflect.TypeOf((*MockIUserService)(nil).GetLoginHistory), userID, limit)
}

// GetUserByEmail mocks base method.
func (m *MockIUserService) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserServiceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserService)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockIUserService) GetUserByID(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserServiceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserService)(nil).GetUserByID), id)
}

// Login mocks base method.
func (m *MockIUserService) Login(email, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserServiceMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserService)(nil).Login), email, password)
}

// RecordLogin mocks base method.
func (m *MockIUserService) RecordLogin(userID uint, ipAddress, userAgent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLogin", userID, ipAddress, userAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordLogin indicates an expected call of RecordLogin.
func (mr *MockIUserServiceMockRecorder) RecordLogin(userID, ipAddress, userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLogin", reflect.TypeOf((*MockIUserService)(nil).RecordLogin), userID, ipAddress, userAgent)
}

// Register mocks base method.
func (m *MockIUserService) Register(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockIUserServiceMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIUserService)(nil).Register), user)
}

// UpdateProfile mocks base method.
func (m *MockIUserService) UpdateProfile(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserServiceMockRecorder) UpdateProfile(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserService)(nil).UpdateProfile), user)
}

// UpdateProfileImage mocks base method.
func (m *MockIUserService) UpdateProfileImage(userID uint, file *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileImage", userID, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileImage indicates an expected call of UpdateProfileImage.
func (mr *MockIUserServiceMockRecorder) UpdateProfileImage(userID, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileImage", reflect.TypeOf((*MockIUserService)(nil).UpdateProfileImage), userID, file)
}
