// Code generated by MockGen. DO NOT EDIT.
// Source: ./note_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Napat/mcpserver-demo/models"
	gomock "github.com/golang/mock/gomock"
)

// MockINoteService is a mock of INoteService interface.
type MockINoteService struct {
	ctrl     *gomock.Controller
	recorder *MockINoteServiceMockRecorder
}

// MockINoteServiceMockRecorder is the mock recorder for MockINoteService.
type MockINoteServiceMockRecorder struct {
	mock *MockINoteService
}

// NewMockINoteService creates a new mock instance.
func NewMockINoteService(ctrl *gomock.Controller) *MockINoteService {
	mock := &MockINoteService{ctrl: ctrl}
	mock.recorder = &MockINoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINoteService) EXPECT() *MockINoteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockINoteService) Create(note *models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockINoteServiceMockRecorder) Create(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockINoteService)(nil).Create), note)
}

// Delete mocks base method.
func (m *MockINoteService) Delete(id, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockINoteServiceMockRecorder) Delete(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockINoteService)(nil).Delete), id, userID)
}

// GetAllByUserID mocks base method.
func (m *MockINoteService) GetAllByUserID(userID uint) ([]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", userID)
	ret0, _ := ret[0].([]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockINoteServiceMockRecorder) GetAllByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockINoteService)(nil).GetAllByUserID), userID)
}

// GetByID mocks base method.
func (m *MockINoteService) GetByID(id, userID uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, userID)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockINoteServiceMockRecorder) GetByID(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockINoteService)(nil).GetByID), id, userID)
}

// Update mocks base method.
func (m *MockINoteService) Update(note *models.Note, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", note, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockINoteServiceMockRecorder) Update(note, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockINoteService)(nil).Update), note, userID)
}
